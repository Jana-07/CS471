<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="db.sqlite3" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2936"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="bookmodule_student2" custom_title="0" dock_id="1" table="4,19:mainbookmodule_student2"/><dock_state state="000000ff00000000fd00000001000000020000024800000213fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002480000012400ffffff000002480000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="auth_group" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="39"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="bookmodule_student" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="46"/><column index="3" value="29"/><column index="4" value="71"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="bookmodule_student2" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="31"/><column index="2" value="148"/><column index="3" value="52"/><column index="4" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="card" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="31"/><column index="2" value="156"/><column index="3" value="75"/><column index="4" value="31"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="course" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="218"/><column index="3" value="35"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="student2" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="31"/><column index="2" value="140"/><column index="3" value="52"/><column index="4" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- Enable foreign key constraints
PRAGMA foreign_keys = ON;

-- Create Card table (required for Student2's OneToOneField)
DROP TABLE IF EXISTS bookmodule_card;
CREATE TABLE bookmodule_card (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    number TEXT UNIQUE NOT NULL,
    expiry_date TEXT,
    cvv TEXT
);

-- Create Department table
DROP TABLE IF EXISTS bookmodule_department;
CREATE TABLE bookmodule_department (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);

-- Create Course table
DROP TABLE IF EXISTS bookmodule_course;
CREATE TABLE bookmodule_course (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    code INTEGER NOT NULL
);

-- Create Student2 table
DROP TABLE IF EXISTS bookmodule_student2;
CREATE TABLE bookmodule_student2 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    card_id INTEGER NOT NULL UNIQUE,
    department_id INTEGER NOT NULL,
    FOREIGN KEY (card_id) REFERENCES bookmodule_card(id) ON DELETE RESTRICT,
    FOREIGN KEY (department_id) REFERENCES bookmodule_department(id) ON DELETE CASCADE
);

-- Create junction table for ManyToMany relationship between Student2 and Course
DROP TABLE IF EXISTS bookmodule_student2_courses;
CREATE TABLE bookmodule_student2_courses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student2_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,
    FOREIGN KEY (student2_id) REFERENCES bookmodule_student2(id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES bookmodule_course(id) ON DELETE CASCADE,
    UNIQUE (student2_id, course_id)
);

-- Insert 10 departments
INSERT INTO bookmodule_department (name) VALUES 
('Computer Science'),
('Mathematics'),
('Physics'),
('Chemistry'),
('Biology'),
('Engineering'),
('Business'),
('Economics'),
('Psychology'),
('History');

-- Insert 20 courses
INSERT INTO bookmodule_course (title, code) VALUES 
('Introduction to Programming', 101),
('Calculus I', 102),
('General Physics', 103),
('Organic Chemistry', 104),
('Cell Biology', 105),
('Data Structures', 201),
('Linear Algebra', 202),
('Quantum Mechanics', 203),
('Biochemistry', 204),
('Genetics', 205),
('Algorithms', 301),
('Discrete Mathematics', 302),
('Thermodynamics', 303),
('Analytical Chemistry', 304),
('Microbiology', 305),
('Database Systems', 401),
('Number Theory', 402),
('Electromagnetism', 403),
('Molecular Biology', 404),
('Software Engineering', 405);

-- Generate 100 cards
INSERT INTO bookmodule_card (number, expiry_date, cvv)
WITH RECURSIVE
  nums(x) AS (
    SELECT 1
    UNION ALL
    SELECT x+1 FROM nums WHERE x &lt; 100
  )
SELECT 
  printf('%04d-%04d-%04d-%04d', 
    ABS(RANDOM() % 9000) + 1000, 
    ABS(RANDOM() % 9000) + 1000, 
    ABS(RANDOM() % 9000) + 1000, 
    ABS(RANDOM() % 9000) + 1000),
  printf('%02d/%04d', ABS(RANDOM() % 12) + 1, ABS(RANDOM() % 5) + 2023),
  printf('%03d', ABS(RANDOM() % 900) + 100)
FROM nums;

-- Insert 100 students
INSERT INTO bookmodule_student2 (name, card_id, department_id)
WITH RECURSIVE
  nums(x) AS (
    SELECT 1
    UNION ALL
    SELECT x+1 FROM nums WHERE x &lt; 100
  )
SELECT 
  CASE ABS(RANDOM() % 10)
    WHEN 0 THEN 'John'
    WHEN 1 THEN 'Mary'
    WHEN 2 THEN 'David'
    WHEN 3 THEN 'Sarah'
    WHEN 4 THEN 'Michael'
    WHEN 5 THEN 'Emily'
    WHEN 6 THEN 'James'
    WHEN 7 THEN 'Jennifer'
    WHEN 8 THEN 'Robert'
    WHEN 9 THEN 'Lisa'
  END || ' ' ||
  CASE ABS(RANDOM() % 10)
    WHEN 0 THEN 'Smith'
    WHEN 1 THEN 'Johnson'
    WHEN 2 THEN 'Williams'
    WHEN 3 THEN 'Brown'
    WHEN 4 THEN 'Jones'
    WHEN 5 THEN 'Miller'
    WHEN 6 THEN 'Davis'
    WHEN 7 THEN 'Garcia'
    WHEN 8 THEN 'Rodriguez'
    WHEN 9 THEN 'Wilson'
  END,
  x,
  ABS(RANDOM() % 10) + 1
FROM nums;

-- Assign 3-6 random courses to each student
INSERT INTO bookmodule_student2_courses (student2_id, course_id)
WITH RECURSIVE
  student_courses AS (
    SELECT 
      s.id AS student_id,
      c.id AS course_id,
      ROW_NUMBER() OVER (PARTITION BY s.id ORDER BY RANDOM()) AS rn
    FROM bookmodule_student2 s
    CROSS JOIN bookmodule_course c
  )
SELECT student_id, course_id
FROM student_courses
WHERE rn &lt;= (ABS(RANDOM() % 4) + 3);

-- Verify data
SELECT 'Departments:', COUNT(*) FROM bookmodule_department;
SELECT 'Courses:', COUNT(*) FROM bookmodule_course;
SELECT 'Cards:', COUNT(*) FROM bookmodule_card;
SELECT 'Students:', COUNT(*) FROM bookmodule_student2;
SELECT 'Student-Course relationships:', COUNT(*) FROM bookmodule_student2_courses;</sql><current_tab id="0"/></tab_sql></sqlb_project>
